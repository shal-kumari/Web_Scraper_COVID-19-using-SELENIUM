
                                                            **Locating Elements**
There are various strategies to locate elements in a page. You can use the most appropriate one for your case. 
Selenium provides the following methods to locate elements in a page:

find_element_by_id
find_element_by_name
find_element_by_xpath
find_element_by_link_text
find_element_by_partial_link_text
find_element_by_tag_name
find_element_by_class_name
find_element_by_css_selector

To find multiple elements (these methods will return a list):

find_elements_by_name
find_elements_by_xpath
find_elements_by_link_text
find_elements_by_partial_link_text
find_elements_by_tag_name
find_elements_by_class_name
find_elements_by_css_selector
Apart from the public methods given above, there are two private methods which might be useful with locators in page objects. 
These are the two private methods: find_element and find_elements.

                                                        **Locating by XPath**
XPath is the language used for locating nodes in an XML document. 
As HTML can be an implementation of XML (XHTML), Selenium users can leverage this powerful language to target elements in their web applications. 
XPath extends beyond (as well as supporting) the simple methods of locating by id or name attributes, and opens up all sorts of new possibilities such as locating the third checkbox on the page.

One of the main reasons for using XPath is when you don’t have a suitable id or name attribute for the element you wish to locate. 
You can use XPath to either locate the element in absolute terms (not advised), or relative to an element that does have an id or name attribute. 
XPath locators can also be used to specify elements via attributes other than id and name.

Absolute XPaths contain the location of all elements from the root (html) and as a result are likely to fail with only the slightest adjustment to the application. 
By finding a nearby element with an id or name attribute (ideally a parent element) you can locate your target element based on the relationship. 
This is much less likely to change and can make your tests more robust.

For instance, consider this page source:

<html>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
   <input name="continue" type="button" value="Clear" />
  </form>
</body>
<html>
The form elements can be located like this:

login_form = driver.find_element_by_xpath("/html/body/form[1]")
login_form = driver.find_element_by_xpath("//form[1]")
login_form = driver.find_element_by_xpath("//form[@id='loginForm']")
Absolute path (would break if the HTML was changed only slightly)
First form element in the HTML
The form element with attribute named id and the value loginForm
The username element can be located like this:

username = driver.find_element_by_xpath("//form[input/@name='username']")
username = driver.find_element_by_xpath("//form[@id='loginForm']/input[1]")
username = driver.find_element_by_xpath("//input[@name='username']")
First form element with an input child element with attribute named name and the value username
First input child element of the form element with attribute named id and the value loginForm
First input element with attribute named ‘name’ and the value username
The “Clear” button element can be located like this:

clear_button = driver.find_element_by_xpath("//input[@name='continue'][@type='button']")
clear_button = driver.find_element_by_xpath("//form[@id='loginForm']/input[4]")

Input with attribute named name and the value continue and attribute named type and the value button
Fourth input child element of the form element with attribute named id and value loginForm
These examples cover some basics, but in order to learn more, the following references are recommended:

1. W3Schools XPath Tutorial
2. W3C XPath Recommendation
3. XPath Tutorial - with interactive examples.
There are also a couple of very useful Add-ons that can assist in discovering the XPath of an element:

1. XPath Checker - suggests XPath and can be used to test XPath results.
2. Firebug - XPath suggestions are just one of the many powerful features of this very useful add-on.
3. XPath Helper - for Google Chrome
